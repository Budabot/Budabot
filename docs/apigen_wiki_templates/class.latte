{* Print class's summary text, visible on wiki page list *}
{if $class|shortDescription|striptags}
#summary {$class|shortDescription|striptags|strip}
{/if}

{block|collapseExtraNewLines}
{* Print class's title *}
={if $class->deprecated}Deprecated {/if}{if $class->interface}Interface{elseif $class->trait}Trait{else}Class{/if} !{$class->name}=
{if $class->valid}

{* Print class's description *}
{!$class|longDescription|striptags}

{* Print instructions of how this class's instance can be @Inject-ed to module *}
{if $class|getInstanceName}
{{{
There is an instance of this class with name '{$class|getInstanceName}' available.
You can include it into a module via injection:
	/** @Inject */
	public ${$class|getInstanceName};
Or:
	/** @Inject("{$class|getInstanceName}") */
	public $someVariableName;
}}}
{/if}

{* Print class's member variable list *}
{var $properties = filterOutLogger(filterOutInjects($class->ownProperties))}
{if empty($properties) == false}
==Variables==
{foreach $properties as $property}
    * {!$property->typeHint|typeLinks:$property} [#{block|titleToAnchor}Variable ${$property->name}{/block} ${$property->name}] {if $property->static}_`[static`]_{/if}
{/foreach}
{/if}

{* Define method's signature return value *}
{define #methodSignatureReturn}{block|strip|trim}
{ifset $method->annotations['return']}{!$method->annotations['return'][0]|typeLinks:$method}{else}mixed{/ifset}
{if $method->returnsReference()}&amp;{/if}
{/block}{/define}


{* Define method's signature parameters *}
{define #methodSignatureParams}{block|strip|trim}
(
{foreach $method->parameters as $parameter}
{!$parameter->typeHint|typeLinks:$method}
<var>{if $parameter->passedByReference}&amp; {/if}${$parameter->name}</var>{if $parameter->defaultValueAvailable} = {!$parameter->defaultValueDefinition|highlightPHP:$class}{elseif $parameter->unlimited},…{/if}{sep}, {/sep}
{/foreach}
)
{/block}{/define}


{* Define method's signature *}
{define #methodSignature}{block|strip|trim}
{include #methodSignatureReturn, method => $method} {$method->name} {include #methodSignatureParams, method => $method}
{/block}{/define}


{* Print class's method list *}
{if $class->ownMethods}
==Methods==
{foreach $class->ownMethods as $method}
    * {include #methodSignatureReturn, method => $method} [#{block|titleToAnchor}{include #methodSignature, method => $method}{/block} {$method->name}] {include #methodSignatureParams, method => $method}
{/foreach}
{/if}
{* End of method list *}


{* Print class's member variables, TODO: Not adjusted yet for wiki printing! *}
{if empty($properties) == false}
----
==Variables Documentation==
{foreach $properties as $property}
{var $annotations = $property->annotations}
===Variable ${$property->name}===

{!$property|longDescription}

<h4>Type</h4>
    {!$property->typeHint|typeLinks:$property}

{if $property->defaultValueDefinition}
<h4>Default Value</h4>
{{{
{!$property->defaultValueDefinition}
}}}
{/if}

{foreach $template->annotationSort($template->annotationFilter($annotations, array('var'))) as $annotation => $descriptions}
<h4>{$annotation|annotationBeautify}</h4>
{foreach $descriptions as $description}
{if $description}
    {!$description|annotation:$annotation:$property}<br>
{/if}
{/foreach}
{/foreach}
{/foreach}
{/if}
{/if}
{* End of member variables *}


{* Print class's methods *}
{if $class->ownMethods}
----
==Methods Documentation==
{foreach $class->ownMethods as $method}
{var $annotations = $method->annotations}

{* Print method's signature title *}
==={include #methodSignature, method => $method}===


{* Print method's description *}
{!$method|longDescription}

{* Print information of method's parameters *}
{if $method->parameters && isset($annotations['param'])}
<h4>Parameters</h4>
{foreach $method->parameters as $parameter}
    * <var>${$parameter->name}</var>{if $parameter->unlimited},…{/if} - {ifset $annotations['param'][$parameter->position]}{!$annotations['param'][$parameter->position]|getParamDescription}{/ifset}
{/foreach}
{/if}

{* Print information of method's return value *}
{if isset($annotations['return']) && 'void' !== $annotations['return'][0]}
<h4>Returns</h4>
    {!$annotations['return'][0]|getReturnDescription}
{/if}

{* Print rest of the method's annotations *}
{foreach $template->annotationSort($template->annotationFilter($annotations, array('deprecated', 'param', 'return', 'throws'))) as $annotation => $descriptions}
<h4>{$annotation|annotationBeautify}</h4>
<div class="list">
{foreach $descriptions as $description}
{if $description}
{!$description|annotation:$annotation:$method}<br>
{/if}
{/foreach}
</div>
{/foreach}



{/foreach}
{/if}
{* End of methods *}

{* Print class's constants, TODO: Not adjusted yet for wiki printing! *}
{var $ownConstants = $class->ownConstants}
<table class="summary" id="constants" n:if="$ownConstants">
<caption>Constants summary</caption>
<tr n:foreach="$ownConstants as $constant" data-order="{$constant->name}" id="{$constant->name}">
	{var $annotations = $constant->annotations}

	<td class="attributes"><code>
		{ifset $annotations['var']}{!$annotations['var'][0]|typeLinks:$constant}{else}{$constant->value|type}{/ifset}
	</code></td>
	<td class="name"><code>
		{if $class->internal}
			<a href="{$constant|manualUrl}" title="Go to PHP documentation"><b>{$constant->name}</b></a>
		{else}
			<a n:tag-if="$config->sourceCode" href="{$constant|sourceUrl}" title="Go to source code"><b>{$constant->name}</b></a>
		{/if}
	</code></td>
	<td class="value"><code>{!$constant->valueDefinition|highlightValue:$class}</code></td>
	<td class="description"><div>
		<a href="#{$constant->name}" class="anchor">#</a>

		<div class="description short">
			{!$constant|shortDescription:true}
		</div>

		<div n:class="description, detailed">
			{!$constant|longDescription}

			{foreach $template->annotationSort($template->annotationFilter($annotations, array('var'))) as $annotation => $descriptions}
				<h4>{$annotation|annotationBeautify}</h4>
				<div class="list">
				{foreach $descriptions as $description}
					{if $description}
						{!$description|annotation:$annotation:$constant}<br>
					{/if}
				{/foreach}
				</div>
			{/foreach}
		</div>
	</div></td>
</tr>
</table>
{* End of constants *}
{/block}
<br/>
----
{$config->title} documentation generated by [http://apigen.org/ {$generator} {$version}] using [http://budabot2.googlecode.com/svn/trunk/docs/apigen_wiki_templates/ custom wiki templates].
